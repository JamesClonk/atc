// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/concourse/atc/db"
)

type FakeResourceConfigCheckSessionLifecycle struct {
	CleanExpiredResourceConfigCheckSessionsStub        func() error
	cleanExpiredResourceConfigCheckSessionsMutex       sync.RWMutex
	cleanExpiredResourceConfigCheckSessionsArgsForCall []struct{}
	cleanExpiredResourceConfigCheckSessionsReturns     struct {
		result1 error
	}
	cleanExpiredResourceConfigCheckSessionsReturnsOnCall map[int]struct {
		result1 error
	}
	CleanUselessResourceConfigCheckSessionsStub        func() error
	cleanUselessResourceConfigCheckSessionsMutex       sync.RWMutex
	cleanUselessResourceConfigCheckSessionsArgsForCall []struct{}
	cleanUselessResourceConfigCheckSessionsReturns     struct {
		result1 error
	}
	cleanUselessResourceConfigCheckSessionsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResourceConfigCheckSessionLifecycle) CleanExpiredResourceConfigCheckSessions() error {
	fake.cleanExpiredResourceConfigCheckSessionsMutex.Lock()
	ret, specificReturn := fake.cleanExpiredResourceConfigCheckSessionsReturnsOnCall[len(fake.cleanExpiredResourceConfigCheckSessionsArgsForCall)]
	fake.cleanExpiredResourceConfigCheckSessionsArgsForCall = append(fake.cleanExpiredResourceConfigCheckSessionsArgsForCall, struct{}{})
	fake.recordInvocation("CleanExpiredResourceConfigCheckSessions", []interface{}{})
	fake.cleanExpiredResourceConfigCheckSessionsMutex.Unlock()
	if fake.CleanExpiredResourceConfigCheckSessionsStub != nil {
		return fake.CleanExpiredResourceConfigCheckSessionsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cleanExpiredResourceConfigCheckSessionsReturns.result1
}

func (fake *FakeResourceConfigCheckSessionLifecycle) CleanExpiredResourceConfigCheckSessionsCallCount() int {
	fake.cleanExpiredResourceConfigCheckSessionsMutex.RLock()
	defer fake.cleanExpiredResourceConfigCheckSessionsMutex.RUnlock()
	return len(fake.cleanExpiredResourceConfigCheckSessionsArgsForCall)
}

func (fake *FakeResourceConfigCheckSessionLifecycle) CleanExpiredResourceConfigCheckSessionsReturns(result1 error) {
	fake.CleanExpiredResourceConfigCheckSessionsStub = nil
	fake.cleanExpiredResourceConfigCheckSessionsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceConfigCheckSessionLifecycle) CleanExpiredResourceConfigCheckSessionsReturnsOnCall(i int, result1 error) {
	fake.CleanExpiredResourceConfigCheckSessionsStub = nil
	if fake.cleanExpiredResourceConfigCheckSessionsReturnsOnCall == nil {
		fake.cleanExpiredResourceConfigCheckSessionsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanExpiredResourceConfigCheckSessionsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceConfigCheckSessionLifecycle) CleanUselessResourceConfigCheckSessions() error {
	fake.cleanUselessResourceConfigCheckSessionsMutex.Lock()
	ret, specificReturn := fake.cleanUselessResourceConfigCheckSessionsReturnsOnCall[len(fake.cleanUselessResourceConfigCheckSessionsArgsForCall)]
	fake.cleanUselessResourceConfigCheckSessionsArgsForCall = append(fake.cleanUselessResourceConfigCheckSessionsArgsForCall, struct{}{})
	fake.recordInvocation("CleanUselessResourceConfigCheckSessions", []interface{}{})
	fake.cleanUselessResourceConfigCheckSessionsMutex.Unlock()
	if fake.CleanUselessResourceConfigCheckSessionsStub != nil {
		return fake.CleanUselessResourceConfigCheckSessionsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.cleanUselessResourceConfigCheckSessionsReturns.result1
}

func (fake *FakeResourceConfigCheckSessionLifecycle) CleanUselessResourceConfigCheckSessionsCallCount() int {
	fake.cleanUselessResourceConfigCheckSessionsMutex.RLock()
	defer fake.cleanUselessResourceConfigCheckSessionsMutex.RUnlock()
	return len(fake.cleanUselessResourceConfigCheckSessionsArgsForCall)
}

func (fake *FakeResourceConfigCheckSessionLifecycle) CleanUselessResourceConfigCheckSessionsReturns(result1 error) {
	fake.CleanUselessResourceConfigCheckSessionsStub = nil
	fake.cleanUselessResourceConfigCheckSessionsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceConfigCheckSessionLifecycle) CleanUselessResourceConfigCheckSessionsReturnsOnCall(i int, result1 error) {
	fake.CleanUselessResourceConfigCheckSessionsStub = nil
	if fake.cleanUselessResourceConfigCheckSessionsReturnsOnCall == nil {
		fake.cleanUselessResourceConfigCheckSessionsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.cleanUselessResourceConfigCheckSessionsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeResourceConfigCheckSessionLifecycle) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cleanExpiredResourceConfigCheckSessionsMutex.RLock()
	defer fake.cleanExpiredResourceConfigCheckSessionsMutex.RUnlock()
	fake.cleanUselessResourceConfigCheckSessionsMutex.RLock()
	defer fake.cleanUselessResourceConfigCheckSessionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResourceConfigCheckSessionLifecycle) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.ResourceConfigCheckSessionLifecycle = new(FakeResourceConfigCheckSessionLifecycle)
